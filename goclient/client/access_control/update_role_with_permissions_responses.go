// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// UpdateRoleWithPermissionsReader is a Reader for the UpdateRoleWithPermissions structure.
type UpdateRoleWithPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRoleWithPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRoleWithPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRoleWithPermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRoleWithPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRoleWithPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRoleWithPermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateRoleWithPermissionsOK creates a UpdateRoleWithPermissionsOK with default headers values
func NewUpdateRoleWithPermissionsOK() *UpdateRoleWithPermissionsOK {
	return &UpdateRoleWithPermissionsOK{}
}

/* UpdateRoleWithPermissionsOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdateRoleWithPermissionsOK struct {
	Payload *models.RoleDTO
}

func (o *UpdateRoleWithPermissionsOK) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}][%d] updateRoleWithPermissionsOK  %+v", 200, o.Payload)
}
func (o *UpdateRoleWithPermissionsOK) GetPayload() *models.RoleDTO {
	return o.Payload
}

func (o *UpdateRoleWithPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleWithPermissionsBadRequest creates a UpdateRoleWithPermissionsBadRequest with default headers values
func NewUpdateRoleWithPermissionsBadRequest() *UpdateRoleWithPermissionsBadRequest {
	return &UpdateRoleWithPermissionsBadRequest{}
}

/* UpdateRoleWithPermissionsBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type UpdateRoleWithPermissionsBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateRoleWithPermissionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}][%d] updateRoleWithPermissionsBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateRoleWithPermissionsBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateRoleWithPermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleWithPermissionsForbidden creates a UpdateRoleWithPermissionsForbidden with default headers values
func NewUpdateRoleWithPermissionsForbidden() *UpdateRoleWithPermissionsForbidden {
	return &UpdateRoleWithPermissionsForbidden{}
}

/* UpdateRoleWithPermissionsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateRoleWithPermissionsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateRoleWithPermissionsForbidden) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}][%d] updateRoleWithPermissionsForbidden  %+v", 403, o.Payload)
}
func (o *UpdateRoleWithPermissionsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateRoleWithPermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleWithPermissionsNotFound creates a UpdateRoleWithPermissionsNotFound with default headers values
func NewUpdateRoleWithPermissionsNotFound() *UpdateRoleWithPermissionsNotFound {
	return &UpdateRoleWithPermissionsNotFound{}
}

/* UpdateRoleWithPermissionsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateRoleWithPermissionsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateRoleWithPermissionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}][%d] updateRoleWithPermissionsNotFound  %+v", 404, o.Payload)
}
func (o *UpdateRoleWithPermissionsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateRoleWithPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRoleWithPermissionsInternalServerError creates a UpdateRoleWithPermissionsInternalServerError with default headers values
func NewUpdateRoleWithPermissionsInternalServerError() *UpdateRoleWithPermissionsInternalServerError {
	return &UpdateRoleWithPermissionsInternalServerError{}
}

/* UpdateRoleWithPermissionsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateRoleWithPermissionsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateRoleWithPermissionsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}][%d] updateRoleWithPermissionsInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateRoleWithPermissionsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateRoleWithPermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
