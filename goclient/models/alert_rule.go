// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertRule AlertRule is the model for alert rules in unified alerting.
//
// swagger:model AlertRule
type AlertRule struct {

	// annotations
	Annotations map[string]string `json:"Annotations,omitempty"`

	// condition
	Condition string `json:"Condition,omitempty"`

	// dashboard UID
	DashboardUID string `json:"DashboardUID,omitempty"`

	// data
	Data []*AlertQuery `json:"Data"`

	// exec err state
	// Enum: [Alerting Error OK]
	ExecErrState string `json:"ExecErrState,omitempty"`

	// for
	For Duration `json:"For,omitempty"`

	// ID
	ID int64 `json:"ID,omitempty"`

	// interval seconds
	IntervalSeconds int64 `json:"IntervalSeconds,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// namespace UID
	NamespaceUID string `json:"NamespaceUID,omitempty"`

	// no data state
	// Enum: [Alerting NoData OK]
	NoDataState string `json:"NoDataState,omitempty"`

	// org ID
	OrgID int64 `json:"OrgID,omitempty"`

	// panel ID
	PanelID int64 `json:"PanelID,omitempty"`

	// rule group
	RuleGroup string `json:"RuleGroup,omitempty"`

	// rule group index
	RuleGroupIndex int64 `json:"RuleGroupIndex,omitempty"`

	// title
	Title string `json:"Title,omitempty"`

	// UID
	UID string `json:"UID,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"Updated,omitempty"`

	// version
	Version int64 `json:"Version,omitempty"`
}

// Validate validates this alert rule
func (m *AlertRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecErrState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoDataState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertRule) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var alertRuleTypeExecErrStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alerting","Error","OK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertRuleTypeExecErrStatePropEnum = append(alertRuleTypeExecErrStatePropEnum, v)
	}
}

const (

	// AlertRuleExecErrStateAlerting captures enum value "Alerting"
	AlertRuleExecErrStateAlerting string = "Alerting"

	// AlertRuleExecErrStateError captures enum value "Error"
	AlertRuleExecErrStateError string = "Error"

	// AlertRuleExecErrStateOK captures enum value "OK"
	AlertRuleExecErrStateOK string = "OK"
)

// prop value enum
func (m *AlertRule) validateExecErrStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertRuleTypeExecErrStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertRule) validateExecErrState(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecErrState) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecErrStateEnum("ExecErrState", "body", m.ExecErrState); err != nil {
		return err
	}

	return nil
}

var alertRuleTypeNoDataStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alerting","NoData","OK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertRuleTypeNoDataStatePropEnum = append(alertRuleTypeNoDataStatePropEnum, v)
	}
}

const (

	// AlertRuleNoDataStateAlerting captures enum value "Alerting"
	AlertRuleNoDataStateAlerting string = "Alerting"

	// AlertRuleNoDataStateNoData captures enum value "NoData"
	AlertRuleNoDataStateNoData string = "NoData"

	// AlertRuleNoDataStateOK captures enum value "OK"
	AlertRuleNoDataStateOK string = "OK"
)

// prop value enum
func (m *AlertRule) validateNoDataStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertRuleTypeNoDataStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertRule) validateNoDataState(formats strfmt.Registry) error {
	if swag.IsZero(m.NoDataState) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoDataStateEnum("NoDataState", "body", m.NoDataState); err != nil {
		return err
	}

	return nil
}

func (m *AlertRule) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("Updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this alert rule based on the context it is used
func (m *AlertRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertRule) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertRule) UnmarshalBinary(b []byte) error {
	var res AlertRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
